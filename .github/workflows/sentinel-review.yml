name: Sentinel Review

on:
  pull_request:
    types: [opened, reopened, synchronize, labeled, unlabeled]
  issue_comment:
    types: [created, edited]
  workflow_dispatch:
    inputs:
      profiles:
        description: "Comma-separated profiles (e.g. frontend,backend)"
        required: false
        type: string
      max_comments:
        description: "Inline annotations cap"
        required: false
        default: "30"
        type: string
      fail_on:
        description: "none|major|critical"
        required: false
        default: "major"
        type: string

permissions:
  contents: read
  checks: write
  pull-requests: write
  issues: write

concurrency:
  group: review-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  gate:
    name: Decide whether to run
    runs-on: ubuntu-latest
    outputs:
      run:           ${{ steps.decide.outputs.run }}
      matrix:        ${{ steps.profiles.outputs.matrix }}
      fail_on:       ${{ steps.resolve.outputs.fail_on }}
      max_comments:  ${{ steps.resolve.outputs.max_comments }}
    steps:
      - name: Ensure jq
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y jq
          fi

      - id: decide
        run: |
          set -euo pipefail
          ev="${{ github.event_name }}"
          action="${{ github.event.action }}"
          run="false"

          if [ "$ev" = "workflow_dispatch" ]; then
            run="true"
          elif [ "$ev" = "pull_request" ]; then
            labels='${{ toJson(github.event.pull_request.labels) }}'
            if echo "$labels" | grep -qi '"name":"ai-review"'; then
              run="true"
            elif [ "$action" = "opened" ] || [ "$action" = "reopened" ]; then
              run="true"
            fi
          elif [ "$ev" = "issue_comment" ]; then
            # Запуск по комментарию. Только если это PR и команда /sentinel review,
            # и автор — MEMBER/OWNER/COLLABORATOR.
            is_pr='${{ toJson(github.event.issue.pull_request) }}'
            body='${{ github.event.comment.body }}'
            assoc='${{ github.event.comment.author_association }}'
            if [ "$is_pr" != "null" ] && echo "$body" | grep -Eiq '^\s*/sentinel\s+review(\b|$)'; then
              case "$assoc" in
                MEMBER|OWNER|COLLABORATOR) run="true" ;;
                *) run="false" ;;
              esac
            fi
          fi

          echo "run=$run" >> "$GITHUB_OUTPUT"

      - uses: actions/checkout@v4
        if: steps.decide.outputs.run == 'true'
        with: { fetch-depth: 0 }

      # Собираем матрицу профилей
      - id: profiles
        if: steps.decide.outputs.run == 'true'
        run: |
          set -euo pipefail

          RAW_INPUT="${{ inputs.profiles || '' }}"

          # Для issue_comment: парсим --profiles=... из комментария (если указано)
          if [ "${{ github.event_name }}" = "issue_comment" ]; then
            BODY='${{ github.event.comment.body }}'
            # вытаскиваем --profiles=foo,bar (если есть)
            if echo "$BODY" | grep -Eoq -- '--profiles=[A-Za-z0-9_,\-]+'; then
              RAW_INPUT="$(echo "$BODY" | sed -n -E 's/.*--profiles=([A-Za-z0-9_,\-]+).*/\1/p' | head -n1)"
            fi
          fi

          if [ -n "$RAW_INPUT" ]; then
            IFS=',' read -ra ARR <<< "$RAW_INPUT"
          else
            ARR=()
            for d in packages/profiles/*; do
              [ -d "$d" ] && ARR+=("$(basename "$d")")
            done
          fi

          [ ${#ARR[@]} -eq 0 ] && ARR+=(frontend)

          echo "Detected profiles: ${ARR[*]}"
          JSON=$(printf '%s\n' "${ARR[@]}" | jq -R . | jq -cs '{profile: .}')
          echo "matrix=$JSON" >> "$GITHUB_OUTPUT"

      # Разрешаем пороги/лимиты: inputs > comment flags > defaults
      - id: resolve
        if: steps.decide.outputs.run == 'true'
        run: |
          set -euo pipefail
          FAIL_ON="${{ inputs.fail_on || '' }}"
          MAX_COMMENTS="${{ inputs.max_comments || '' }}"

          if [ "${{ github.event_name }}" = "issue_comment" ]; then
            BODY='${{ github.event.comment.body }}'
            # --fail=critical|major|none
            if echo "$BODY" | grep -Eoq -- '--fail=(critical|major|none)'; then
              FAIL_ON="$(echo "$BODY" | sed -n -E 's/.*--fail=(critical|major|none).*/\1/p' | head -n1)"
            fi
            # --max=NUMBER
            if echo "$BODY" | grep -Eoq -- '--max=[0-9]+'; then
              MAX_COMMENTS="$(echo "$BODY" | sed -n -E 's/.*--max=([0-9]+).*/\1/p' | head -n1)"
            fi
          fi

          [ -z "$FAIL_ON" ] && FAIL_ON="major"
          [ -z "$MAX_COMMENTS" ] && MAX_COMMENTS="30"

          echo "Using: fail_on=$FAIL_ON, max_comments=$MAX_COMMENTS"
          echo "fail_on=$FAIL_ON" >> "$GITHUB_OUTPUT"
          echo "max_comments=$MAX_COMMENTS" >> "$GITHUB_OUTPUT"

  review:
    needs: gate
    if: needs.gate.outputs.run == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.gate.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: pnpm/action-setup@v4
        with: { run_install: false }

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - run: pnpm install --frozen-lockfile
      - run: pnpm -r run build

      - name: Build diff
        id: diff
        run: |
          set -euo pipefail
          mkdir -p .sentinel/reviews

          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE="${{ github.event.pull_request.base.sha }}"
            HEAD="${{ github.event.pull_request.head.sha }}"
          else
            DEFAULT_BRANCH="${{ github.event.repository.default_branch }}"
            git fetch origin "${DEFAULT_BRANCH}" --depth=1
            BASE="$(git merge-base "origin/${DEFAULT_BRANCH}" HEAD)"
            HEAD="HEAD"
          fi

          git diff --no-color --unified=0 "$BASE...$HEAD" > .sentinel/reviews/changes.diff || true

          if [ -s .sentinel/reviews/changes.diff ]; then
            echo "has_changes=true" >> "$GITHUB_OUTPUT"
          else
            echo "No changes."
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Run review (${{ matrix.profile }})
        if: steps.diff.outputs.has_changes == 'true'
        env:
          SENTINEL_PROFILE: ${{ matrix.profile }}
          SENTINEL_ANALYTICS: '1'
          SENTINEL_ANALYTICS_DIR: .sentinel/analytics
        run: |
          set -euo pipefail
          mkdir -p ".sentinel/reviews/${SENTINEL_PROFILE}"

          pnpm sentinel:review -- --diff .sentinel/reviews/changes.diff \
            --profile "${SENTINEL_PROFILE}" \
            --out-json ".sentinel/reviews/${SENTINEL_PROFILE}/review.json" \
            --out-md   ".sentinel/reviews/${SENTINEL_PROFILE}/review.md" \
            --fail-on "${{ needs.gate.outputs.fail_on }}" \
            --max-comments "${{ needs.gate.outputs.max_comments }}"

      - name: Render HTML (${{ matrix.profile }})
        if: steps.diff.outputs.has_changes == 'true'
        run: |
          pnpm -F @sentinel/cli exec node dist/index.js render-html \
            --in  ".sentinel/reviews/${{ matrix.profile }}/review.json" \
            --out ".sentinel/reviews/${{ matrix.profile }}/review.html"

      - name: Ingest + Export analytics
        if: steps.diff.outputs.has_changes == 'true'
        run: |
          pnpm sentinel:analytics:ingest
          pnpm sentinel:analytics:export

      - name: Publish GitHub Check + sticky comment (${{ matrix.profile }})
        if: steps.diff.outputs.has_changes == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REVIEW_JSON: .sentinel/reviews/${{ matrix.profile }}/review.json
          PROFILE: ${{ matrix.profile }}
          FAIL_ON: ${{ needs.gate.outputs.fail_on }}
        run: node scripts/post-results-to-github.cjs

      - name: Upload artifacts (${{ matrix.profile }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sentinel-artifacts-${{ matrix.profile }}
          path: |
            .sentinel/reviews/${{ matrix.profile }}/review.json
            .sentinel/reviews/${{ matrix.profile }}/review.md
            .sentinel/reviews/${{ matrix.profile }}/review.html
            .sentinel/analytics/**
          if-no-files-found: ignore
