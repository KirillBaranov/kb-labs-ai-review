name: Sentinel Review

on:
  pull_request:
    types: [opened, reopened, synchronize, labeled]
  issue_comment:
    types: [created]                     # запуск через комментарий /review
  workflow_dispatch:
    inputs:
      profiles:
        description: "Comma-separated profiles (e.g. frontend,backend)"
        required: false
      max_comments:
        description: "Inline annotations cap"
        required: false
        default: "30"
      fail_on:
        description: "none|major|critical"
        required: false
        default: "major"

permissions:
  contents: read
  checks: write
  pull-requests: write

env:
  REVIEW_LABEL: ai-review

concurrency:
  group: review-${{ github.event.pull_request.number || github.event.issue.number || github.sha }}
  cancel-in-progress: true

jobs:
  gate:
    name: Decide whether to run (with debug)
    runs-on: ubuntu-latest
    outputs:
      run:       ${{ steps.decide.outputs.run }}
      reason:    ${{ steps.decide.outputs.reason }}
      profiles:  ${{ steps.profiles.outputs.matrix }}
      pr_number: ${{ steps.decide.outputs.pr_number }}
      head_sha:  ${{ steps.decide.outputs.head_sha }}
      base_sha:  ${{ steps.decide.outputs.base_sha }}

    steps:
      - name: Decide
        id: decide
        uses: actions/github-script@v7
        with:
          script: |
            const REVIEW_LABEL = process.env.REVIEW_LABEL || 'ai-review';
            const ev = context.eventName;
            const action = context.payload.action;
            const labelName = context.payload.label?.name;
            let run = false;
            let reason = 'no-match';
            let prNumber = null, headSha = null, baseSha = null;

            // helper: fetch PR (works for pull_request & issue_comment)
            async function fetchPR() {
              const num =
                context.payload.pull_request?.number ??
                context.payload.issue?.number ??
                null;
              if (!num) return null;
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner, repo: context.repo.repo, pull_number: num
              });
              return pr;
            }

            if (ev === 'workflow_dispatch') {
              run = true; reason = 'workflow_dispatch';
            } else if (ev === 'pull_request') {
              const pr = await fetchPR();
              if (pr) {
                prNumber = pr.number;
                headSha = pr.head.sha;
                baseSha = pr.base.sha;
              }
              if (action === 'opened' || action === 'reopened') {
                run = true; reason = `pull_request:${action}`;
              } else if (action === 'labeled' && labelName === REVIEW_LABEL) {
                run = true; reason = `pull_request:labeled:${labelName}`;
              } else if (action === 'synchronize') {
                // на synchronize смотрим ТЕКУЩИЕ метки PR
                const has = (pr?.labels || []).some(l => (l?.name||'').toLowerCase() === REVIEW_LABEL.toLowerCase());
                if (has) { run = true; reason = 'pull_request:synchronize+label-present'; }
              }
            } else if (ev === 'issue_comment') {
              // триггер из комментария
              const isPR = !!context.payload.issue?.pull_request;
              const body = (context.payload.comment?.body || '').trim();
              if (isPR && /^\/(sentinel\s+)?review\b/i.test(body)) {
                const pr = await fetchPR();
                if (pr) {
                  prNumber = pr.number;
                  headSha = pr.head.sha;
                  baseSha = pr.base.sha;
                  run = true; reason = 'issue_comment:/review';
                }
              }
            }

            core.summary
              .addHeading('Gate decision')
              .addTable([
                [{data:'Key',header:true},{data:'Value',header:true}],
                ['event', ev],
                ['action', action ?? '—'],
                ['labelName', labelName ?? '—'],
                ['REVIEW_LABEL', REVIEW_LABEL],
                ['run', String(run)],
                ['reason', reason],
                ['pr_number', String(prNumber ?? '—')],
                ['head_sha', headSha ?? '—'],
                ['base_sha', baseSha ?? '—'],
              ])
              .write();

            core.setOutput('run', run ? 'true' : 'false');
            core.setOutput('reason', reason);
            if (prNumber) core.setOutput('pr_number', String(prNumber));
            if (headSha)  core.setOutput('head_sha', headSha);
            if (baseSha)  core.setOutput('base_sha', baseSha);

      - name: Checkout (for profiles detection)
        if: steps.decide.outputs.run == 'true'
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Detect profiles
        if: steps.decide.outputs.run == 'true'
        id: profiles
        shell: bash
        run: |
          set -euo pipefail
          RAW="${{ inputs.profiles || '' }}"
          if [ -n "$RAW" ]; then
            IFS=',' read -ra ARR <<< "$RAW"
          else
            ARR=()
            for d in packages/profiles/*; do
              [ -d "$d" ] && ARR+=("$(basename "$d")")
            done
          fi
          [ ${#ARR[@]} -eq 0 ] && ARR+=(frontend)
          echo "Detected profiles: ${ARR[*]}"
          JSON=$(printf '%s\n' "${ARR[@]}" | jq -R . | jq -cs '{profile: .}')
          echo "matrix=$JSON" >> "$GITHUB_OUTPUT"

  review:
    needs: gate
    if: needs.gate.outputs.run == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.gate.outputs.profiles) }}

    steps:
      # если запуск из комментария — чекаутим head PR напрямую
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event_name == 'issue_comment' && format('refs/pull/{0}/head', needs.gate.outputs.pr_number) || '' }}

      - uses: pnpm/action-setup@v4
        with: { run_install: false }

      - uses: actions/setup-node@v4
        with: { node-version: 20, cache: pnpm }

      - run: pnpm install --frozen-lockfile
      - run: pnpm -r run build

      - name: Build diff
        id: diff
        shell: bash
        env:
          PR_BASE: ${{ needs.gate.outputs.base_sha }}
          PR_HEAD: ${{ needs.gate.outputs.head_sha }}
        run: |
          set -euo pipefail
          mkdir -p .sentinel/reviews
          if [ -n "${PR_BASE}" ] && [ -n "${PR_HEAD}" ]; then
            BASE="${PR_BASE}"; HEAD="${PR_HEAD}"
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE="${{ github.event.pull_request.base.sha }}"
            HEAD="${{ github.event.pull_request.head.sha }}"
          else
            DEFAULT_BRANCH="${{ github.event.repository.default_branch }}"
            git fetch origin "${DEFAULT_BRANCH}" --depth=1
            BASE="$(git merge-base "origin/${DEFAULT_BRANCH}" HEAD)"
            HEAD="HEAD"
          fi
          echo "BASE=$BASE"
          echo "HEAD=$HEAD"
          git diff --no-color --unified=0 "$BASE...$HEAD" > .sentinel/reviews/changes.diff || true
          if [ -s .sentinel/reviews/changes.diff ]; then
            echo "has_changes=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Run review (${{ matrix.profile }})
        if: steps.diff.outputs.has_changes == 'true'
        env:
          SENTINEL_PROFILE: ${{ matrix.profile }}
          SENTINEL_ANALYTICS: '1'
          SENTINEL_ANALYTICS_DIR: .sentinel/analytics
        run: |
          set -euo pipefail
          mkdir -p ".sentinel/reviews/${SENTINEL_PROFILE}"
          pnpm sentinel:review -- --diff .sentinel/reviews/changes.diff \
            --profile "${SENTINEL_PROFILE}" \
            --out-json ".sentinel/reviews/${SENTINEL_PROFILE}/review.json" \
            --out-md   ".sentinel/reviews/${SENTINEL_PROFILE}/review.md" \
            --fail-on "${{ inputs.fail_on || 'major' }}" \
            --max-comments "${{ inputs.max_comments || '30' }}"

      - name: Render HTML (${{ matrix.profile }})
        if: steps.diff.outputs.has_changes == 'true'
        run: |
          pnpm -F @sentinel/cli exec node dist/index.js render-html \
            --in  ".sentinel/reviews/${{ matrix.profile }}/review.json" \
            --out ".sentinel/reviews/${{ matrix.profile }}/review.html"

      - name: Ingest + Export analytics
        if: steps.diff.outputs.has_changes == 'true'
        run: |
          pnpm sentinel:analytics:ingest
          pnpm sentinel:analytics:export

      - name: Publish GitHub Check + sticky comment (${{ matrix.profile }})
        if: steps.diff.outputs.has_changes == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REVIEW_JSON: .sentinel/reviews/${{ matrix.profile }}/review.json
          PROFILE: ${{ matrix.profile }}
          FAIL_ON: ${{ inputs.fail_on || 'major' }}
        run: node scripts/post-results-to-github.cjs

      - name: Upload artifacts (${{ matrix.profile }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sentinel-artifacts-${{ matrix.profile }}
          path: |
            .sentinel/reviews/${{ matrix.profile }}/review.json
            .sentinel/reviews/${{ matrix.profile }}/review.md
            .sentinel/reviews/${{ matrix.profile }}/review.html
            .sentinel/analytics/**
          if-no-files-found: ignore
