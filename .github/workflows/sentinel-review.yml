name: Sentinel Review

on:
  pull_request:
    types: [opened, reopened, synchronize, labeled]
  issue_comment:
    types: [created]          # поддержка запуска комментом /review
  workflow_dispatch:
    inputs:
      profiles:
        description: "Comma-separated profiles (e.g. frontend,backend)"
        required: false
      max_comments:
        description: "Inline annotations cap"
        required: false
        default: "30"
      fail_on:
        description: "none|major|critical"
        required: false
        default: "major"

permissions:
  contents: read
  checks: write
  pull-requests: write

# легко меняется имя метки тут
env:
  REVIEW_LABEL: ai-review

concurrency:
  group: review-${{ github.event.pull_request.number || github.event.issue.number || github.sha }}
  cancel-in-progress: true

jobs:
  gate:
    name: Decide whether to run
    runs-on: ubuntu-latest
    outputs:
      run: ${{ steps.decide.outputs.run }}
      profiles: ${{ steps.profiles.outputs.matrix }}
      pr_number: ${{ steps.prmeta.outputs.pr_number }}
      head_sha: ${{ steps.prmeta.outputs.head_sha }}
      base_sha: ${{ steps.prmeta.outputs.base_sha }}
    steps:
      # 0) Сохраним метаданные PR для issue_comment (и заодно для PR)
      - name: Collect PR meta
        id: prmeta
        uses: actions/github-script@v7
        with:
          script: |
            const isPR = !!(context.payload.pull_request) || !!(context.payload.issue && context.payload.issue.pull_request);
            if (!isPR) {
              core.setOutput('pr_number', '');
              core.setOutput('head_sha', '');
              core.setOutput('base_sha', '');
              return;
            }
            const prNumber = context.payload.pull_request?.number ?? context.payload.issue.number;
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner, repo: context.repo.repo, pull_number: prNumber
            });
            core.setOutput('pr_number', String(pr.number));
            core.setOutput('head_sha', pr.head.sha);
            core.setOutput('base_sha', pr.base.sha);

      # 1) Решение: когда запускать
      - id: decide
        shell: bash
        env:
          EV: ${{ github.event_name }}
          ACTION: ${{ github.event.action }}
          LABEL_NAME: ${{ github.event.label.name }}
          REVIEW_LABEL: ${{ env.REVIEW_LABEL }}
          PR_HAS_LABELS: ${{ toJson(github.event.pull_request.labels) }}
        run: |
          set -euo pipefail
          run=false

          echo "event=$EV action=$ACTION label=$LABEL_NAME review_label=$REVIEW_LABEL"

          if [ "$EV" = "workflow_dispatch" ]; then
            run=true
          elif [ "$EV" = "pull_request" ]; then
            # запускаем:
            #  - при первом открытии/переоткрытии
            #  - когда добавили нужный лейбл
            #  - на synchronize, если PR уже помечен нужным лейблом
            if [ "$ACTION" = "opened" ] || [ "$ACTION" = "reopened" ]; then
              run=true
            elif [ "$ACTION" = "labeled" ] && [ "${LABEL_NAME:-}" = "$REVIEW_LABEL" ]; then
              run=true
            elif [ "$ACTION" = "synchronize" ]; then
              # проверим наличие метки в текущем списке
              if echo "$PR_HAS_LABELS" | grep -qi "\"name\":\"$REVIEW_LABEL\""; then
                run=true
              fi
            fi
          elif [ "$EV" = "issue_comment" ]; then
            # разрешаем только для PR и только на команду /review (или /sentinel review)
            body='${{ github.event.comment.body }}'
            is_pr='${{ !!github.event.issue.pull_request }}'
            if [ "$is_pr" = "true" ]; then
              if echo "$body" | grep -Eqi '^\s*/(sentinel\s+)?review(\b|$)'; then
                run=true
              fi
            fi
          fi

          echo "run=$run" >> "$GITHUB_OUTPUT"
          echo "Decision: run=$run"

      # 2) Определяем профили
      - name: Detect profiles
        if: steps.decide.outputs.run == 'true'
        id: profiles
        shell: bash
        run: |
          set -euo pipefail
          RAW="${{ inputs.profiles || '' }}"
          if [ -n "$RAW" ]; then
            IFS=',' read -ra ARR <<< "$RAW"
          else
            ARR=()
            for d in packages/profiles/*; do
              [ -d "$d" ] && ARR+=("$(basename "$d")")
            done
          fi
          [ ${#ARR[@]} -eq 0 ] && ARR+=(frontend)
          printf 'Detected profiles: %s\n' "${ARR[*]}"
          JSON=$(printf '%s\n' "${ARR[@]}" | jq -R . | jq -cs '{profile: .}')
          echo "matrix=$JSON" >> "$GITHUB_OUTPUT"

  review:
    needs: gate
    if: needs.gate.outputs.run == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.gate.outputs.profiles) }}
    steps:
      # checkout: для issue_comment берём head-ветку PR, иначе обычный
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event_name == 'issue_comment' && format('refs/pull/{0}/head', needs.gate.outputs.pr_number) || '' }}

      - uses: pnpm/action-setup@v4
        with: { run_install: false }

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - run: pnpm install --frozen-lockfile
      - run: pnpm -r run build

      - name: Build diff
        id: diff
        shell: bash
        env:
          EV: ${{ github.event_name }}
          PR_BASE: ${{ needs.gate.outputs.base_sha }}
          PR_HEAD: ${{ needs.gate.outputs.head_sha }}
        run: |
          set -euo pipefail
          mkdir -p .sentinel/reviews

          if [ -n "$PR_BASE" ] && [ -n "$PR_HEAD" ]; then
            BASE="$PR_BASE"
            HEAD="$PR_HEAD"
          elif [ "$EV" = "pull_request" ]; then
            BASE="${{ github.event.pull_request.base.sha }}"
            HEAD="${{ github.event.pull_request.head.sha }}"
          else
            DEFAULT_BRANCH="${{ github.event.repository.default_branch }}"
            git fetch origin "${DEFAULT_BRANCH}" --depth=1
            BASE="$(git merge-base "origin/${DEFAULT_BRANCH}" HEAD)"
            HEAD="HEAD"
          fi

          git diff --no-color --unified=0 "$BASE...$HEAD" > .sentinel/reviews/changes.diff || true

          if [ -s .sentinel/reviews/changes.diff ]; then
            echo "has_changes=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Run review (${{ matrix.profile }})
        if: steps.diff.outputs.has_changes == 'true'
        env:
          SENTINEL_PROFILE: ${{ matrix.profile }}
          SENTINEL_ANALYTICS: '1'
          SENTINEL_ANALYTICS_DIR: .sentinel/analytics
        run: |
          set -euo pipefail
          mkdir -p ".sentinel/reviews/${SENTINEL_PROFILE}"

          pnpm sentinel:review -- --diff .sentinel/reviews/changes.diff \
            --profile "${SENTINEL_PROFILE}" \
            --out-json ".sentinel/reviews/${SENTINEL_PROFILE}/review.json" \
            --out-md   ".sentinel/reviews/${SENTINEL_PROFILE}/review.md" \
            --fail-on "${{ inputs.fail_on || 'major' }}" \
            --max-comments "${{ inputs.max_comments || '30' }}"

      - name: Render HTML (${{ matrix.profile }})
        if: steps.diff.outputs.has_changes == 'true'
        run: |
          pnpm -F @sentinel/cli exec node dist/index.js render-html \
            --in  ".sentinel/reviews/${{ matrix.profile }}/review.json" \
            --out ".sentinel/reviews/${{ matrix.profile }}/review.html"

      - name: Ingest + Export analytics
        if: steps.diff.outputs.has_changes == 'true'
        run: |
          pnpm sentinel:analytics:ingest
          pnpm sentinel:analytics:export

      - name: Publish GitHub Check + sticky comment (${{ matrix.profile }})
        if: steps.diff.outputs.has_changes == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REVIEW_JSON: .sentinel/reviews/${{ matrix.profile }}/review.json
          PROFILE: ${{ matrix.profile }}
          FAIL_ON: ${{ inputs.fail_on || 'major' }}
        run: node scripts/post-results-to-github.cjs

      - name: Upload artifacts (${{ matrix.profile }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sentinel-artifacts-${{ matrix.profile }}
          path: |
            .sentinel/reviews/${{ matrix.profile }}/review.json
            .sentinel/reviews/${{ matrix.profile }}/review.md
            .sentinel/reviews/${{ matrix.profile }}/review.html
            .sentinel/analytics/**
          if-no-files-found: ignore
