name: Sentinel Review

on:
  pull_request:
    types: [opened, reopened, synchronize, labeled, unlabeled]
  workflow_dispatch:
    inputs:
      profiles:
        description: "Comma-separated profiles (e.g. frontend,backend)"
        required: false
      max_comments:
        description: "Inline annotations cap"
        required: false
        default: "30"
      fail_on:
        description: "none|major|critical"
        required: false
        default: "major"

permissions:
  contents: read
  checks: write
  pull-requests: write

concurrency:
  group: review-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  # Матрица профилей — как у тебя в рабочем варианте
  detect-profiles:
    # Условие запуска job целиком: ручной запуск ИЛИ открытие/переоткрытие/синхронизация PR,
    # ИЛИ событие labeled с label == ai-review
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'pull_request' && (
        github.event.action == 'opened' ||
        github.event.action == 'reopened' ||
        github.event.action == 'synchronize' ||
        (github.event.action == 'labeled' && github.event.label.name == 'ai-review')
      ))
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.mk.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - id: mk
        shell: bash
        run: |
          set -euo pipefail
          RAW="${{ inputs.profiles || '' }}"
          if [ -n "$RAW" ]; then
            IFS=',' read -ra ARR <<< "$RAW"
          else
            ARR=()
            for d in packages/profiles/*; do
              [ -d "$d" ] && ARR+=("$(basename "$d")")
            done
          fi
          [ ${#ARR[@]} -eq 0 ] && ARR+=(frontend)
          JSON=$(printf '%s\n' "${ARR[@]}" | jq -R . | jq -cs '{profile: .}')
          echo "matrix=$JSON" >> "$GITHUB_OUTPUT"

  review:
    needs: detect-profiles
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.detect-profiles.outputs.matrix) }}
    env:
      RUN_AT_UTC: ${{ github.run_started_at }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      # pnpm версию берём из package.json ("packageManager")
      - uses: pnpm/action-setup@v4
        with: { run_install: false }

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - run: pnpm install --frozen-lockfile
      - run: pnpm -r run build

      - name: Build diff
        id: diff
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p .sentinel/reviews

          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE="${{ github.event.pull_request.base.sha }}"
            HEAD="${{ github.event.pull_request.head.sha }}"
          else
            DEFAULT_BRANCH="${{ github.event.repository.default_branch }}"
            git fetch origin "${DEFAULT_BRANCH}" --depth=1
            BASE="$(git merge-base "origin/${DEFAULT_BRANCH}" HEAD)"
            HEAD="HEAD"
          fi

          git diff --no-color --unified=0 "$BASE...$HEAD" > .sentinel/reviews/changes.diff || true

          if [ -s .sentinel/reviews/changes.diff ]; then
            echo "has_changes=true" >> "$GITHUB_OUTPUT"
          else
            echo "No changes."
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Run review (${{ matrix.profile }})
        if: steps.diff.outputs.has_changes == 'true'
        env:
          SENTINEL_PROFILE: ${{ matrix.profile }}
          SENTINEL_ANALYTICS: '1'
          SENTINEL_ANALYTICS_DIR: .sentinel/analytics
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p ".sentinel/reviews/${SENTINEL_PROFILE}"

          pnpm sentinel:review -- --diff .sentinel/reviews/changes.diff \
            --profile "${SENTINEL_PROFILE}" \
            --out-json ".sentinel/reviews/${SENTINEL_PROFILE}/review.json" \
            --out
